pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_IMAGE = 'mohit993/bms:latest'
        EKS_CLUSTER_NAME = 'mohit-eks'
        AWS_REGION = 'eu-north-1'
    }

    stages {
        stage('Clean Workspaces') {
            steps {
                cleanWs()
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Mohitbisht1997/Book-My-Show.git'
                sh '''
                echo "Checking workspace contents after checkout:"
                ls -la
                '''
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-scanner') {  // Ensure correct SonarQube name
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=BMS \
                        -Dsonar.projectKey=BMS
                    '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh '''
                cd bookmyshow-app
                ls -la
                if [ -f package.json ]; then 
                    rm -rf node_modules package-lock.json
                    npm install
                else
                    echo "error: package.json not found in bookmyshow-app!"
                    exit 1
                fi
                '''
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    sh '''
                    echo "Building Docker image"
                    docker build --no-cache -t $DOCKER_IMAGE -f bookmyshow-app/Dockerfile bookmyshow-app

                    echo "Pushing Docker image to Docker Hub"
                    docker push $DOCKER_IMAGE
                    '''
                }
            }
        }
        stage('Deploy to EKS Cluster') {
            steps {
                script {
                    sh '''
                    echo "Current Working Directory:"
                    pwd
            
                    echo "Listing all files..."
                    find $WORKSPACE -name "*.yml" -o -name "*.yaml"
            
                    echo "Verifying AWS credentials"
                    aws sts get-caller-identity || { echo "AWS credentials issue!"; exit 1; }
            
                    echo "Configuring kubectl for EKS cluster"
                    aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION || { echo "EKS configuration failed!"; exit 1; }

                    echo "Testing kubectl connectivity"
                    kubectl get nodes || { echo "kubectl is not connected to the cluster!"; exit 1; }

                    echo "Deploying application on EKS"
                    kubectl apply -f deployment.yml || { echo "deployment.yml not found!"; exit 1; }
                    kubectl apply -f service.yml || { echo "service.yml not found!"; exit 1; }

                    echo "Verifying deployment"
                    kubectl get pods
                    kubectl get svc
                    '''
                }
            }
        }
    }
    post {
        always {
            emailext attachLog: true,
                subject: "Build ${currentBuild.currentResult}",
                body: "Project: ${env.JOB_NAME}<br/>" +
                      "Build Number: ${env.BUILD_NUMBER}<br/>" +
                      "URL: ${env.BUILD_URL}<br/>",
                to: 'mahinbisht1997@gmail.com',
                attachmentsPattern: 'trivyfs.txt'
        }
    }
}
